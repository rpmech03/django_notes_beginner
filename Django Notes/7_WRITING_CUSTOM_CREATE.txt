#now we will create animal here--

class AnimalCreateAPI(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated,IsPetOwnerPermission]

    def get(self, request):#IS PERTICULAR USER NE JO PETS CREATE KIYE HOGE WO MIL JAYEGE
        queryset =Animal.objects.filter(animal_owner = request.user)
        

        if request.GET.get('search'):
            search = request.GET.get('search')
            queryset = queryset.filter(
                Q(name__icontains = search) |
                Q(animal_description__icontains = search) |
                Q(animal_gender__iexact = search) |
                Q(animal_breed__animal_breed__icontains = search) |
                Q(animal_color__animal_color__icontains = search) 
            )

        serializer = AnimalSerializer(queryset, many =True)
       

        return Response({
            'status' : True,
            'message' : 'animals fetched with GET',
            'data': serializer.data
        })

    def post(self, request):  #animal create ke andar sbse phle yhi bnayege
        try:
            data = request.data
            data['animal_owner'] = request.user.id #give name directly of the owner here
            serializer = AnimalSerializer(data = data)
            
            if serializer.is_valid():
                serializer.save()
                return Response({
                    'status': True,
                    'message':'animal created',
                    'data': serializer.data
                })
            return Response({
                    'status': False,
                    'message':'Invalid data',
                    'data': serializer.errors
                })

        except Exception as e:
            print(e)

            return Response({
                'status' : False,
                'message' : 'something went wrong',
                'data' : {}
            })

    def patch(self, request):
        
            try:
                data = request.data

                if data.get('id') is None:
                    return Response({
                        'status': False,
                        'message':'animal id is required',
                        'data': {}
                    })

                animal_obj = Animal.objects.filter(uuid = data.get('id'))
                
                if not animal_obj.exists():
                    return Response({
                        'status': False,
                        'message':'Invalid animal id ',
                        'data': {}
                    })

                animal_obj = animal_obj[0]
                self.check_object_permissions(request, animal_obj)

                serializer = AnimalSerializer(animal_obj,data = data, partial = True)
                if serializer.is_valid():
                    serializer.save()

                    return Response({
                            'status': True,
                            'message':'animal updated',
                            'data': serializer.data
                        })

            except Exception as e:
                print(e)

                return Response({
                    'status' : False,
                    'message' : 'something went wrong or you dont have permission to perform this action',
                    'data' : {}
                })

###views.py :

from rest_framework.permissions import IsAuthenticated #only for those who authenticated
from rest_framework.authentication import TokenAuthentication #using token so here we have to import this


class AnimalCreateAPI(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated,IsPetOwnerPermission]


###SERIALIZERS.PY:

 #custom serializer
    def create(self, data):
        animal_breed = data.pop('animal_breed')
        animal_color = data.pop('animal_color')

        animal = Animal.objects.create(**data, animal_category = Category.objects.get(category_name="Dog"))

        #animal breed n animal color set nh ho rha tha islye loop lgaya
        for ab in animal_breed:
            # print(ab['animal_breed'])
            animal_breed_obj = AnimalBreed.objects.get(animal_breed=ab['animal_breed'])
            animal.animal_breed.add(animal_breed_obj)

        for ac in animal_color:
            # print(ac['animal_breed'])
            animal_color_obj = AnimalColor.objects.get(animal_color=ac['animal_color'])
            animal.animal_color.add(animal_color_obj)


        return Animal.objects.first()

        # return animal
        # print(data)

 
    class Meta:
        model = Animal
        # fields = '__all__'
        exclude = ['updated_at']


###MODELS.PY---
from django.utils.text import slugify

CLASS ANIMAL M---
   #save method ko override krege taki slug automatic generate ho
    def save(self, *args, **kwargs):
        uid = str(uuid.uuid4()).split('-')
        self.animal_slug = slugify(self.animal_name) + '-' + uid[0]
        super(Animal,self).save(*args, **kwargs)